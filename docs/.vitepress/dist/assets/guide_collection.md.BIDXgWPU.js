import{_ as t,c as e,o,a3 as i}from"./chunks/framework.CiERAXBW.js";const l="/assets/collection-panel.XkXqug1P.png",y=JSON.parse('{"title":"Collection","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/collection.md","filePath":"guide/collection.md","lastUpdated":1717136072000}'),s={name:"guide/collection.md"},d=i('<h1 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection {#collection}&quot;">​</a></h1><h2 id="overview" tabindex="-1">概述 <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;概述 {#overview}&quot;">​</a></h2><p><strong>Collection</strong> 是 PicoBase 中的一个重要概念，控制台所维护的也是一系列 Collection，其代表了你应用程序的数据实体(领域实体) 。假设拿博客系统举例，博客系统中的用户、文章、评论等领域模型在 PicoBase中都叫做 Collection。在数据库层面这些都是物理存在的实体表。在底层 Collection 会包含一系列元数据（<strong>Schema</strong>）信息，这些信息维护在 <strong>pb_collection</strong> 表中。</p><p>Collection 中单独的一条记录叫做 <strong>record</strong> ，可以简单的理解为实体表中的一条数据，如某一条用户数据、评论数据等。</p><p id="fields">PicoBase 中可以为 Collection 定义一系列字段 <strong>fields</strong>,如下:</p><table><thead><tr><th style="text-align:left;">Field</th><th style="text-align:center;">举例值</th><th style="text-align:right;">支持的 modifiers</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;example&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>editor</code></td><td style="text-align:center;"><code>&quot;&quot;</code>, <code>&quot;&lt;p&gt;example&lt;/p&gt;&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>number</code></td><td style="text-align:center;"><code>0</code>,<code>-1</code>,<code>1.5</code>,<code>100</code></td><td style="text-align:right;"><code>+</code>(增加),<code>-</code>(减少)</td></tr><tr><td style="text-align:left;"><code>bool</code></td><td style="text-align:center;"><code>false</code>,<code>true</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>email</code></td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;zozo@scmobility.com&quot; </code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>url</code></td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;https://picobase.cn&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>date</code></td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;2024-06-01 00:00:00&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>select</code>(单选)</td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;optionA&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>select</code>(多选)</td><td style="text-align:center;"><code>[]</code>,<code>[&quot;optionA&quot;,&quot;optionB&quot;]</code></td><td style="text-align:right;"><code>+</code>(追加操作),<code>-</code>(移除操作)</td></tr><tr><td style="text-align:left;"><code>relation</code>(单选)</td><td style="text-align:center;"><code>&quot;&quot;</code>,<code>&quot;JJ2YRU30FBG8MqX&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>relation</code>(多选)</td><td style="text-align:center;"><code>[]</code>, <code>[&quot;JJ2YRU30FBG8MqX&quot;, &quot;eP2jCr1h3NGtsbz&quot;]</code></td><td style="text-align:right;"><code>+</code>(追加操作),<code>-</code>(移除操作)</td></tr><tr><td style="text-align:left;"><code>file</code>(单选)</td><td style="text-align:center;"><code>&quot;&quot;</code>, <code>&quot;example123_Ab24ZjL.png&quot;</code></td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>field</code>(多选)</td><td style="text-align:center;"><code>[]</code>, <code>[&quot;file1_Ab24ZjL.png&quot;, &quot;file2_Frq24ZjL.txt&quot;]</code></td><td style="text-align:right;"><code>-</code>(移除操作)</td></tr><tr><td style="text-align:left;"><code>json</code></td><td style="text-align:center;"><em>任意 json 格式数据</em></td><td style="text-align:right;"></td></tr></tbody></table><p>你可以通过访问 Console 控制台、 <a href="./webapi">Web Api</a>、<a href="./client-sdks">客户端SDKs</a> 的方式创建 collections 和 records</p><p>Collection panel 如下： <img src="'+l+`" alt="collection-panel.png"></p><p>有三种类型的 Collection 可以选择创建 Base collection、View collection 和 Auth collection。</p><h2 id="basecollection" tabindex="-1">Base collection <a class="header-anchor" href="#basecollection" aria-label="Permalink to &quot;Base collection {#basecollection}&quot;">​</a></h2><p><strong>Base collection</strong> 是 PicoBase 中默认的 collection 类型，可以存储任意类型的数据，如文章、产品、评论等。 该类型的 collection 会自动生成三个系统字段，分别是 <code>id</code>、<code>created</code> 和 <code>updated</code>。仅 <code>id</code> 可以被设置，且必须是长度为 15 位的字符。</p><h2 id="viewcollection" tabindex="-1">View collection <a class="header-anchor" href="#viewcollection" aria-label="Permalink to &quot;View collection {#viewcollection}&quot;">​</a></h2><p><strong>View collection</strong> 是一个只读类型的 collection，这个 collection 中的数据来自一段 SQL 查询。你可以应用该 collection 实现聚合、统计等自定义查询。如下面的例子，创建了一个包含 3 个字段的只读 collection，分别是 <code>id</code>, <code>name</code>, <code>totalComments</code>。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalComments</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> posts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> comments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">postId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>View collection 不可以接收实时事件，因为该 collection 没有 create/update/delete 操作。</p></div><h2 id="authcollection" tabindex="-1">Auth collection <a class="header-anchor" href="#authcollection" aria-label="Permalink to &quot;Auth collection {#authcollection}&quot;">​</a></h2><p><strong>Auth collection</strong> 拥有 Base collection 的所有特性，可以用来帮助你的应用实现多种认证。</p><p>每个 Auth collection 包含以下系统字段：<code>id</code>,<code>created</code>,<code>updated</code>,<code>username</code>,<code>email</code>,<code>emailVisibility</code>,<code>verified</code>。</p><p>系统中可以有多套认证逻辑，如的系统可以有用户、会员、客户端、管理员等。这些都可以用 Auth collection 表示，每个 collection 都有各自的认证逻辑（邮件+密码/账号+密码，或者 OAuth2 认证）和所管理的数据（api endpoints 接口）访问权限。</p><p>用户可以创建各种各样的访问控制方式：</p><ul><li><p>基于角色组 <strong>Role(Group)</strong></p><p>举例：你可以在自己的 Auth collection 中附加一个名为“角色”的下拉选择字段，选项包括：&quot;普通用户&quot;和&quot;超级用户&quot; 。然后在其他一些 Base collection 中，你可以定义规则，只允许&quot;超级用户&quot;进行操作。</p><p><code>@request.auth.role = &quot;superUser&quot;</code></p></li><li><p>基于关系 <strong>Relation(Ownership)</strong></p><p>举例：假设你有两个 Collection 一个是 base 类型的<code>文章collection</code>，一个是 auth 类型的<code>用户collection</code> ，你可以在<code>文章collection</code> 中创建一个指向<code>用户collection</code>的作者字段。目的是实现一个功能，只让作者能够访问自己的文章。你可以定义如下规则： <code>@request.auth.id != &quot;&quot; &amp;&amp; author = @request.auth.id</code></p><p>也支持关系的嵌套，如：</p><p><code>someRelField.anotherRelField.author = @request.auth.id</code></p></li><li><p>特殊管理 <strong>Managed</strong> 除了默认的“list”、“view”、“create”、“update”、“delete” API 规则之外，Auth collection 还有一个特殊的“Managed” API 规则，可以允许一个用户（甚至可以来自不同的 collection）完全管理另一个用户的数据（例如，更改他们的电子邮件、密码等）</p></li><li><p>混合 <strong>Mixed</strong> 可以根据你的使用情况构建一个混合方法。多个规则可以用括号<code>()</code>分组，并结合使用 <code>&amp;&amp;</code>（与）和 <code>||</code>（或）运算符。</p><p><code>@request.auth.id != &quot;&quot; &amp;&amp; (@request.auth.role = &quot;superUser&quot; || author = @request.auth.id)</code></p></li></ul>`,21),c=[d];function a(n,r,p,h,g,u){return o(),e("div",null,c)}const q=t(s,[["render",a]]);export{y as __pageData,q as default};
