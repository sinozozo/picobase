import{_ as e,c as s,o as i,a3 as a}from"./chunks/framework.CiERAXBW.js";const t="/assets/api-rules.C_4dBL4I.png",l="/assets/filters-syntax.34n1a4PN.png",q=JSON.parse('{"title":"API访问规则和过滤","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api-rules-and-filters.md","filePath":"guide/api-rules-and-filters.md","lastUpdated":1717136330000}'),o={name:"guide/api-rules-and-filters.md"},n=a('<h1 id="api-rules-and-filters" tabindex="-1">API访问规则和过滤 <a class="header-anchor" href="#api-rules-and-filters" aria-label="Permalink to &quot;API访问规则和过滤 {#api-rules-and-filters}&quot;">​</a></h1><h2 id="api-rules" tabindex="-1">API 访问规则 <a class="header-anchor" href="#api-rules" aria-label="Permalink to &quot;API 访问规则 {#api-rules}&quot;">​</a></h2><p>PicoBase 中针对 Collection 的访问控制可以在其规则面板中定义，同时也可以提供数据过滤的支持。也就是说你可以定义什么情况下可以访问这些 Collection API，甚至是你希望访问这些 API 希望哪些数据能够被看到。如： 你希望<code>只有文章的发布者可以看到自己未删除的文章</code>。</p><p><strong>访问规则限定</strong>：<code>只有文章发布者可以看到自己的文章</code>。</p><p><strong>数据范围限定</strong>：<code>能够查看到未删除的文章</code>：。</p><p>以上都可以通过 PicoBase 中进行简单的配置实现，而无需任何额外的编码。</p><p>API 访问规则的管理界面如下：</p><p><img src="'+t+'" alt="api-rules.png"></p><p>每个 Collection 都有 5 个访问规则，对应特定的 API 动作。</p><ul><li><code>listRule</code></li><li><code>viewRule</code></li><li><code>createRule</code></li><li><code>updateRule</code></li><li><code>deleteRule</code></li></ul><p><a href="./collection#authcollection">Auth collection</a> 存在一个额外的配置项 <code>options.manageRule</code>,允许用户管理其他 collection 的能力，如修改其他 collection 的邮件，密码等。</p><p>每个规则有三种形式的设定：</p><ul><li><strong>“locked”</strong> - <code>null</code>，默认值，表示该API只能被 Picobase 的管理员访问。</li><li><strong>空字符串</strong> - 表示拥有任意用户角色的用户可以访问。</li><li><strong>任意非空字符串</strong> - 表示仅被认证的用户，且满足访问规则定义表达式才能够执行该请求。</li></ul><div class="info custom-block"><p class="custom-block-title">Collection 中的角色</p><p>Picobase 中存在两种角色： <code>admin</code> 和 <code>user</code>。 <code>admin</code> 可以理解成超管，可以管理任何 collection，包括其它的 <code>admin</code> 。且系统默认提供了一套<code>admin</code>的管理功能（登录界面、admin 管理界面）。<code>user</code> 泛指开发人员自己定义的角色，可以是普通用户、app、设备等一系列需要鉴权的角色。同样系统提供多种认证方式给到<code>user</code> 角色，OAuth2.0、identity/email+password。</p></div><div class="warning custom-block"><p class="custom-block-title"><strong>PicoBase 中的 API 规则也充当数据过滤器！</strong></p><p>换句话说，例如，您可以通过使用简单的过滤表达式，比如 status = &quot;active&quot;（其中&quot;status&quot; 是 collection 中定义的字段），来仅允许列出 <code>status = &quot;active&quot;</code> 的记录。</p><p>如果请求不符合listRule，则API将返回200空项响应，如果不符合createRule则返回400，如果不符合viewRule、updateRule和deleteRule则返回404。所有规则在被 <code>“locked”</code>（即仅限 admin ）且请求客户端不是 admin 时将返回403。</p><p>当授权 admin 执行操作时，API规则将被忽略（admin 可以访问一切）！</p></div><h2 id="filters-syntax" tabindex="-1">过滤语法 <a class="header-anchor" href="#filters-syntax" aria-label="Permalink to &quot;过滤语法 {#filters-syntax}&quot;">​</a></h2><p>进入 collection 的管理页面，在 Fields tab 的右侧可以看到 API Rules 的控制面板。</p><p><img src="'+l+`" alt="filters-syntax.png"></p><p>API 规则配置面板支持自动提示，通常情况下一般使用三组 fields 进行配置。</p><ul><li><p>自定义的 Collection schema <a href="./collection#fields">fields</a></p><p>所有 Relation field 中的嵌套字段也同样支持，如 <code>someRelField.status != &quot;pending&quot;</code></p></li><li><p><strong>@request.</strong>*</p><p>该配置表示访问当前 request 数据，如 query parameters， body/form data,用户认证信息等。</p><ul><li><p><code>@request.context</code> - 当前规则使用的 context (<code>@request.context != &quot;oauth2&quot;</code>)</p><p><em>当前支持的 context 值， <code>default</code>，<code>oauth2</code>，<code>realtime</code>, <code>protectedFile</code>.</em></p></li><li><p><code>@request.method</code> - 当前请求的 Method 信息 (<code>@request.method = &quot;GET&quot;</code>)</p></li><li><p><code>@request.headers.*</code> - 当前请求的 Headers 信息 (<code>@request.headers.x_token = &quot;test&quot;</code>)</p><p>header keys 会被小写化，中划线转为下划线。(比如 &quot;X-Token&quot; is &quot;x_token&quot;).</p></li><li><p><code>@request.query.*</code> - 当前请求的 query 信息 (<code>@request.query.page = &quot;1&quot;</code>)</p></li><li><p><code>@request.data.*</code> - 当前请求的 body 中的 data 信息 (<code>@request.data.title != &quot;&quot;</code>)</p></li><li><p><code>@request.auth.*</code> - 当前请求的用户认证信息 (<code>@request.auth.id != &quot;&quot;</code>)</p></li></ul></li><li><p><strong>@collection.</strong>*</p><p>这个 filter 可以用于针对与当前 collection 没有直接关联的其他 collection（即没有指向它的关联字段），但它们都共享一个公共字段值，比如一个类别ID：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@collection.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">news</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">categoryId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> categoryId &amp;&amp; @collection.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">news</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span></code></pre></div></li></ul><p>语法遵循 <strong>OPERAND</strong> <strong>OPERATOR</strong> <strong>OPERAND</strong> 规则</p><ul><li><p>OPERAND - 值或变量标识符，类似 sql 中的 <code>name</code> = <code>&quot;zhangsan&quot;</code> , <code>1</code> = <code>1</code>, <code>false</code> = <code>true</code>，看语法标注部分进行理解。</p><p>值或变量标识符可以是 <strong>变量名</strong>，<strong>某个数值</strong>，<strong>某个单引号双引号包围的字符串</strong>，<strong>null</strong>， <strong>true</strong>，<strong>false</strong>。</p></li><li><p>OPERATOR 操作符</p><ul><li><code>=</code> 等于</li><li><code>!=</code> 不等于</li><li><code>&gt;</code> 大于</li><li><code>&gt;=</code> 大于等于</li><li><code>&lt;</code> 小于</li><li><code>&lt;=</code> 小于等于</li><li><code>~</code> like 操作，表示模糊匹配或包含。如果没有指定，自动在右侧的字符串操作数中加上&quot;%&quot;以进行通配符匹配。</li><li><code>!~</code> 同上取反</li><li><code>?=</code> 包含</li><li><code>?!=</code> 不包含</li><li><code>?&gt;</code> 包含大于</li><li><code>?&gt;=</code> 包含大于等于</li><li><code>?&lt;</code> 包含小于</li><li><code>?&lt;=</code> 包含小于等于</li><li><code>?~</code> 包含模糊匹配</li><li><code>?!~</code> 同上取反</li></ul></li></ul><p><strong>可以组合多个表达式通过使用 <code>(...)</code>,<code>&amp;&amp;</code>,<code>||</code> 字符。</strong></p><p>也可以使用单行注释语法 <code>// Example comment.</code></p><h2 id="special-identifiers-and-modifiers" tabindex="-1">特殊标识符和修饰符 <a class="header-anchor" href="#special-identifiers-and-modifiers" aria-label="Permalink to &quot;特殊标识符和修饰符{#special-identifiers-and-modifiers}&quot;">​</a></h2><h3 id="macros" tabindex="-1">@macros <a class="header-anchor" href="#macros" aria-label="Permalink to &quot;@macros{#macros}&quot;">​</a></h3><p>以下 macros 可以应用到数据过滤表达式中：</p><div class="info custom-block"><p class="custom-block-title">宏表达式</p><p>@now - 当前时间</p><p>@second - 当前时间秒数(0-59)</p><p>@minute - 当前时间分钟数(0-59)</p><p>@hour - 当前时间小时数(0-23)</p><p>@weekday - 当前周几(0-6)</p><p>@day - 当前日期（1-31）</p><p>@month - 当前月份（1-12）</p><p>@year - 当前年（1970-2099）</p><p>@todayStart - 当前日期的起始时间</p><p>@todayEnd - 当前日期的结束时间</p><p>@monthStart - 当前月份的起始时间</p><p>@monthEnd - 当前月份的结束时间</p><p>@yearStart - 当前年份的起始时间</p><p>@yearEnd - 当前年份的结束时间</p></div><p>例如，你可以这样使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@request.data.publicDate &gt;= @now</span></span></code></pre></div><h3 id="isset-modifier" tabindex="-1">:isset 修饰符 <a class="header-anchor" href="#isset-modifier" aria-label="Permalink to &quot;:isset 修饰符{#isset-modifier}&quot;">​</a></h3><p>该修饰符只针对于 @request.* 字段，用于检查数据是否存在。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@request.data.role:isset = false</span></span></code></pre></div><h3 id="length-modifier" tabindex="-1">:length modifier <a class="header-anchor" href="#length-modifier" aria-label="Permalink to &quot;:length modifier{#length-modifier}&quot;">​</a></h3><p>该修饰符可以用来检查多选 fields 的数据长度（file，select，relation）</p><p>可以作用于 collection 和 @request.data.* fields。如:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example submitted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someSelectField&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [&quot;val1&quot;, &quot;val2&quot;]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">someSelectField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> existing record field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someRelationField:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h3 id="each-modifier" tabindex="-1">:each 修饰符 <a class="header-anchor" href="#each-modifier" aria-label="Permalink to &quot;:each 修饰符{#each-modifier}&quot;">​</a></h3><p>该修饰符可作用于多选 fields （file，select，relation），通常用于作为多选数据的遍历。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 检查提交的多选select 是否包含 &quot;create&quot;</span></span>
<span class="line"><span>@request.data.someSelectField:each ~ &quot;create&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 检查是否多选字段中以 pb_ 前缀开头</span></span>
<span class="line"><span>someSelectField:each ~ &quot;pb_%&quot;</span></span></code></pre></div><h2 id="examples" tabindex="-1">示例 <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;示例 {#examples}&quot;">​</a></h2><ul><li><p>允许仅注册用户</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@request.auth.id != &quot;&quot;</span></span></code></pre></div></li><li><p>允许注册用户访问且返回状态为 active 和 pending 的数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@request.auth.id != &quot;&quot; &amp;&amp; (status = &quot;active&quot; || status = &quot;pending&quot;)</span></span></code></pre></div></li><li><p>只允许已注册用户，这些用户在allowed_users多关联字段值中被列出的（类似白名单）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@request.auth.id != &quot;&quot; &amp;&amp; allowed_users.id ?= @request.auth.id</span></span></code></pre></div></li><li><p>只允许访问 zozo 开头的标题数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>title ~ &quot;zozo%&quot;</span></span></code></pre></div></li></ul>`,42),p=[n];function d(c,r,h,u,k,g){return i(),s("div",null,p)}const y=e(o,[["render",d]]);export{q as __pageData,y as default};
